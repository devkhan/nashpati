// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace nashpati.skin
{
	public partial class NowPlayingController : BaseViewController
	{
		private NSMutableArray _playlist;

		[Export("playlistItemArray")]
		public NSArray Playlist
		{
			get
			{
				return _playlist;
			}
		}

		public NowPlayingController (IntPtr handle) : base (handle)
		{
			_playlist = new NSMutableArray();
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.View.Frame = new CoreGraphics.CGRect(100, 100, 400, 800);

			//NowPlayingList.Activated += (sender, e) =>
			//{
			//	if (Playlist.GetItem<PlaylistItem>((System.nuint)((NSTableView)sender).SelectedRow).IsDownloaded)
			//	{
			//		//PlayerViewController.player.
			//	}
			//	Console.WriteLine(sender.ToString());
			//	Console.WriteLine(e.ToString());
			//};

			var dataSource = new NowPlayingTableDataSource();

			// TODO: Debug data, remove on release.
			//DummyDataUtils.playlistItems().ForEach(dataSource.Items.Add);

			NowPlayingList.DataSource = dataSource;
			NowPlayingList.Delegate = new NowPlayingTableDelegate(dataSource, NowPlayingList);
			NSNotificationCenter.DefaultCenter.AddObserver(new NSString("NewUrlAdded"), AddToPlaylist);
			
		}

		[Export("addObject:")]
		public void AddItem(PlaylistItem item)
		{
			WillChangeValue("playlistItemArray");
			_playlist.Add(item);
			DidChangeValue("playlistItemArray");
		}

		[Export("insertObject:inPlaylistItemArrayAtIndex:")]
		public void InsertItem(PlaylistItem item, nint index)
		{
			WillChangeValue("playlistItemArray");
			_playlist.Insert(item, index);
			DidChangeValue("playlistItemArray");
		}

		[Export("removeObjectFromPlaylistItemArrayAtIndex:")]
		public void RemoveItem(nint index)
		{
			WillChangeValue("playlistItemArray");
			_playlist.RemoveObject(index);
			DidChangeValue("playlistItemArray");
		}

		[Export("setPlaylistItemArray:")]
		public void SetPlaylist(NSMutableArray array)
		{
			WillChangeValue("playlistItemArray");
			_playlist = array;
			DidChangeValue("playlistItemArray");
		}

		public override void PreferencesChanged(Preferences preferences)
		{
			base.PreferencesChanged(preferences);
		}

		public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue(segue, sender);
			Console.WriteLine("PrepareForSegue");
		}

		public void AddToPlaylist(NSNotification notif)
		{
			Console.WriteLine("URL recieved: " + notif.Object);
			// TODO: ~~Check if site is supported, and~~ also support filesystem URIs.
			var count = ((NowPlayingTableDataSource)NowPlayingList.DataSource).Items.Count;
			((NowPlayingTableDataSource)NowPlayingList.DataSource).Items.Add(new PlaylistItem(videoUrl: notif.Object.ToString()));
			NowPlayingList.InsertRows(new NSIndexSet(count), NSTableViewAnimation.SlideUp);
		}
	}
}
